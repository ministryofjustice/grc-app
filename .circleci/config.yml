version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.4.0
  aws-cli: circleci/aws-cli@4.0.0 # use v4 of this orb
  aws-ecr: circleci/aws-ecr@8.2.1 # this orb doesn't support OIDC v2, so we use aws-cli to authenticate
references:
  app_containers: &app_containers
    docker:
      - image: 'circleci/postgres:10.4'
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: grc-application-test
          POSTGRES_PORT: 5432
          POSTGRES_PASSWORD: password
  cloud_container: &cloud_container
    docker:
      - image: 'ministryofjustice/cloud-platform-tools:1.24'
        environment:
          GITHUB_TEAM_NAME_SLUG: pet
          REPO_NAME: grc-app
jobs:
  build:
    parameters:
      env_name:
        type: string
      ecr_endpoint:
        type: string
    docker:
      - image: 'circleci/python:3.10'
        environment:
          DATABASE_URL: 'postgresql://postgres:password@localhost:5432/grc'
          FLASK_ENV: test
          FLASK_DEBUG: 1
          FLASK_APP: grc
          LOG_LEVEL: DEBUG
          TEST_URL: 'http://localhost:8080'
          SECRET_KEY: ef987sd9fwkjefosf9we0svs9q3evsd0
          SQLALCHEMY_DATABASE_URI: 'postgresql://postgres:password@localhost:5432/grc'
          SQLALCHEMY_TRACK_MODIFICATION: false
          DEFAULT_ADMIN_USER: grc-service-account@cabinetoffice.gov.uk
          NOTIFY_API: '${NOTIFY_API}'
          NOTIFY_OVERRIDE_EMAIL: ivan.touloumbadjian@hmcts.net
          BUCKET_NAME: 'cloud-platform-558bc9877f5cc03fc5d7a241c17360b5' # use the DEV S3 bucket for e2e test uploads for all environments
          AWS_REGION: eu-west-2
          GOVUK_PAY_API: 'https://publicapi.payments.service.gov.uk/'
          GOVUK_PAY_API_KEY: '${GOVUK_PAY_API_KEY}'
      - image: 'circleci/postgres:10.4'
        environment:
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres
          POSTGRES_DB: grc-application-test
          POSTGRES_PORT: 5432
          POSTGRES_PASSWORD: password
    steps:
      - checkout
      - setup_remote_docker
      - when:
          condition:
            equal: [ DEV, << parameters.env_name >> ]
          steps:
            - aws-cli/setup:
                role_arn: $ECR_ROLE_TO_ASSUME_DEV 
                region: $ECR_REGION_DEV 
            - run:
                name: Login to DEV ECR
                command: |
                  aws ecr get-login-password --region $ECR_REGION_DEV | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID_DEV}.dkr.ecr.${ECR_REGION_DEV}.amazonaws.com
      - when:
          condition:
            equal: [ PREPROD, << parameters.env_name >> ]
          steps:
            - aws-cli/setup:
                role_arn: $ECR_ROLE_TO_ASSUME_PREPROD 
                region: $ECR_REGION_PREPROD 
            - run:
                name: Login to PREPROD ECR
                command: |
                  aws ecr get-login-password --region $ECR_REGION_PREPROD | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID_PREPROD}.dkr.ecr.${ECR_REGION_PREPROD}.amazonaws.com
      - when:
          condition:
            equal: [ PROD, << parameters.env_name >> ]
          steps:
            - aws-cli/setup:
                role_arn: $ECR_ROLE_TO_ASSUME_PROD 
                region: $ECR_REGION_PROD 
            - run:
                name: Login to PROD ECR
                command: |
                  aws ecr get-login-password --region $ECR_REGION_PROD | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID_PROD}.dkr.ecr.${ECR_REGION_PROD}.amazonaws.com
      - run:
          name: Install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - run:
          name: Compile welsh translations
          command: |
            . venv/bin/activate
            pybabel compile -d grc/translations
      - run:
          name: Install Playwright, browsers and coverage tool
          command: |
            . venv/bin/activate
            pip install playwright==1.41.2 pytest-playwright asyncio pytest-html pytest-cov
            pip install -e .
            python -m playwright install --with-deps
      - run:
          name: Database init
          command: |
            . venv/bin/activate
            python setup-db.py
      - run:
          name: Database migration
          command: |
            . venv/bin/activate
            flask db upgrade
            flask db stamp head
            flask db migrate
            flask db upgrade
      - run:
          name: Run unit and integration tests
          command: |
            . venv/bin/activate
            pytest --cov=grc --cov=admin --ignore=tests/end_to_end_tests --ignore=tests/test_ping_json.py --html=reports/unit_int_report.html --cov-report=html:reports/coverage
      - run:
          name: Start site and run e2e
          command: |
            . venv/bin/activate
            waitress-serve --call --port=8080 'grc:create_app' &
            pytest tests/test_ping_json.py --max-retries 5 --timeout 3 --html=reports/smoke_report.html
            pytest tests/end_to_end_tests/* -s --show-capture=all -v --html=reports/e2e_report.html
      - store_artifacts:
          path: reports/

      - run:
          name: build app image
          command: |
            pip install flask_migrate
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              -t grc-app .

      - run:
          name: build admin image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV
            docker build \
              -f admin.Dockerfile \
              -t grc-admin \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              .
      - run:
          name: build dashboard image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV
            docker build \
              -f dashboard.Dockerfile \
              -t grc-dashboard \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              .
      - tag_and_push_images:
          env_name: << parameters.env_name >>
          ecr_endpoint: << parameters.ecr_endpoint >>

  deploy_image_to_dev:
    <<: *cloud_container
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Authenticate to LIVE cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT_DEV} | base64 -d > ./ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME}
            kubectl config set-credentials circleci --token=${K8S_TOKEN_DEV}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE_DEV}
            kubectl config use-context ${K8S_CLUSTER_NAME}

      - run:
          name: rolling update image jobs
          command: |
            find deploy/development/jobs/ -name '*.yaml' -exec sed -i -e "s/:grc-admin-latest/:grc-admin-$CIRCLE_SHA1/g" {} +
            kubectl apply -n grc-dev --record=false -f ./deploy/development/jobs

      - deploy:
          name: rolling update image
          command: |
            sed -i -e s/:grc-app-latest/:grc-app-$CIRCLE_SHA1/ deploy/development/app-deployment.yaml
            sed -i -e s/:grc-admin-latest/:grc-admin-$CIRCLE_SHA1/ deploy/development/admin-deployment.yaml
            sed -i -e s/:grc-dashboard-latest/:grc-dashboard-$CIRCLE_SHA1/ deploy/development/dashboard-deployment.yaml
            kubectl apply -n grc-dev --record=false -f ./deploy/development


  deploy_image_to_preprod:
    <<: *cloud_container
    steps:
      - checkout
      - run:
          name: Authenticate to LIVE cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT_PREPROD} | base64 -d > ./ca.crt  
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME}
            kubectl config set-credentials circleci --token=${K8S_TOKEN_PREPROD}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE_PREPROD}
            kubectl config use-context ${K8S_CLUSTER_NAME}

      - run:
          name: rolling update image jobs
          command: |
            find deploy/staging/jobs/ -name '*.yaml' -exec sed -i -e "s/:grc-admin-latest/:grc-admin-$CIRCLE_SHA1/g" {} +
            kubectl apply -n grc-preprod --record=false -f ./deploy/staging/jobs

      - deploy:
          name: rolling update image
          command: |
            sed -i -e s/:grc-app-latest/:grc-app-$CIRCLE_SHA1/ deploy/staging/app-deployment.yaml
            sed -i -e s/:grc-admin-latest/:grc-admin-$CIRCLE_SHA1/ deploy/staging/admin-deployment.yaml
            sed -i -e s/:grc-dashboard-latest/:grc-dashboard-$CIRCLE_SHA1/ deploy/staging/dashboard-deployment.yaml
            kubectl apply -n grc-preprod --record=false -f ./deploy/staging

  deploy_image_to_production:
    <<: *cloud_container
    steps:
      - checkout
      - run:
          name: Authenticate to LIVE cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT_PROD} | base64 -d > ./ca.crt  
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME}
            kubectl config set-credentials circleci --token=${K8S_TOKEN_PROD}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE_PROD}
            kubectl config use-context ${K8S_CLUSTER_NAME}

      - run:
          name: rolling update image jobs
          command: |
            find deploy/production/jobs/ -name '*.yaml' -exec sed -i -e "s/:grc-admin-latest/:grc-admin-$CIRCLE_SHA1/g" {} +
            kubectl apply -n grc-prod --record=false -f ./deploy/production/jobs

      - deploy:
          name: rolling update image
          command: |
            sed -i -e s/:grc-app-latest/:grc-app-$CIRCLE_SHA1/ deploy/production/app-deployment.yaml
            sed -i -e s/:grc-admin-latest/:grc-admin-$CIRCLE_SHA1/ deploy/production/admin-deployment.yaml
            sed -i -e s/:grc-dashboard-latest/:grc-dashboard-$CIRCLE_SHA1/ deploy/production/dashboard-deployment.yaml
            kubectl apply -n grc-prod --record=false -f ./deploy/production

  build_maintenance_page:
    parameters:
      env_name:
        type: string
      ecr_endpoint:
        type: string
    working_directory: ~/grc-app/maintenance
    docker:
      - image: circleci/python:3.10
    steps:
      - checkout:
          path: ~/grc-app
      - when:
          condition:
            equal: [ DEV, << parameters.env_name >> ]
          steps:
            - aws-cli/setup:
                role_arn: $ECR_ROLE_TO_ASSUME_DEV
                region: $ECR_REGION_DEV
            - run:
                name: Login to DEV ECR
                command: |
                  aws ecr get-login-password --region $ECR_REGION_DEV | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID_DEV}.dkr.ecr.${ECR_REGION_DEV}.amazonaws.com
      - when:
          condition:
            equal: [ PREPROD, << parameters.env_name >> ]
          steps:
            - aws-cli/setup:
                role_arn: $ECR_ROLE_TO_ASSUME_PREPROD 
                region: $ECR_REGION_PREPROD 
            - run:
                name: Login to PREPROD ECR
                command: |
                  aws ecr get-login-password --region $ECR_REGION_PREPROD | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID_PREPROD}.dkr.ecr.${ECR_REGION_PREPROD}.amazonaws.com
      - when:
          condition:
            equal: [ PROD, << parameters.env_name >> ]
          steps:
            - aws-cli/setup:
                role_arn: $ECR_ROLE_TO_ASSUME_PROD 
                region: $ECR_REGION_PROD 
            - run:
                name: Login to PROD ECR
                command: |
                  aws ecr get-login-password --region $ECR_REGION_PROD | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID_PROD}.dkr.ecr.${ECR_REGION_PROD}.amazonaws.com

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: build maintenance page image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              -t grc-maintenance-custom .

      - tag_and_push_maintenance_image:
          env_name: << parameters.env_name >>
          ecr_endpoint: << parameters.ecr_endpoint >>

  deploy_maintenance_page_dev:
    <<: *cloud_container
    steps:
      - checkout
      - run:
          name: Authenticate to LIVE cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT_DEV} | base64 -d > ./ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME}
            kubectl config set-credentials circleci --token=${K8S_TOKEN_DEV}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE_DEV}
            kubectl config use-context ${K8S_CLUSTER_NAME}
      - deploy:
          name: deploy maintenance page DEV
          command: |
            kubectl apply -n grc-dev --record=false -f ./deploy/development/maintenance
      - deploy:
          name: direct traffic to maintenance page
          command: |
            kubectl apply -n grc-dev --record=false -f ./deploy/development/ingress.yaml
            
  deploy_maintenance_page_preprod:
    <<: *cloud_container
    steps:
      - checkout
      - run:
          name: Authenticate to LIVE cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT_PREPROD} | base64 -d > ./ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME}
            kubectl config set-credentials circleci --token=${K8S_TOKEN_PREPROD}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE_PREPROD}
            kubectl config use-context ${K8S_CLUSTER_NAME}
      - deploy:
          name: deploy maintenance page PREPROD
          command: |
            kubectl apply -n grc-preprod --record=false -f ./deploy/staging/maintenance
      - deploy:
          name: direct traffic to maintenance page
          command: |
            kubectl apply -n grc-preprod --record=false -f ./deploy/staging/ingress.yaml
            kubectl apply -n grc-preprod --record=false -f ./deploy/staging/ingress-admin.yaml
            
  deploy_maintenance_page_prod:
    <<: *cloud_container
    steps:
      - checkout
      - run:
          name: Authenticate to LIVE cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT_PROD} | base64 -d > ./ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME}
            kubectl config set-credentials circleci --token=${K8S_TOKEN_PROD}
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=${K8S_NAMESPACE_PROD}
            kubectl config use-context ${K8S_CLUSTER_NAME}
      - deploy:
          name: deploy maintenance page PROD
          command: |
            kubectl apply -n grc-prod --record=false -f ./deploy/production/maintenance
      - deploy:
          name: direct traffic to maintenance page
          command: |
            kubectl apply -n grc-prod --record=false -f ./deploy/production/ingress.yaml
            kubectl apply -n grc-prod --record=false -f ./deploy/production/ingress-admin.yaml


commands:
    tag_and_push_images:
      description: Tag and push images to relative ecr endpoint
      parameters:
        env_name:
          type: string
        ecr_endpoint:
          type: string
      steps:
        - run:
            name: Tag and push images to << parameters.env_name >> repo
            command: |

              docker tag grc-admin "<< parameters.ecr_endpoint >>:grc-admin-${CIRCLE_SHA1}"
              docker tag grc-admin "<< parameters.ecr_endpoint >>:grc-admin-latest"
              docker tag grc-app "<< parameters.ecr_endpoint >>:grc-app-${CIRCLE_SHA1}"
              docker tag grc-app "<< parameters.ecr_endpoint >>:grc-app-latest"
              docker tag grc-dashboard "<< parameters.ecr_endpoint >>:grc-dashboard-${CIRCLE_SHA1}"
              docker tag grc-dashboard "<< parameters.ecr_endpoint >>:grc-dashboard-latest"

              docker push "<< parameters.ecr_endpoint >>:grc-admin-${CIRCLE_SHA1}"
              docker push "<< parameters.ecr_endpoint >>:grc-admin-latest"
              docker push "<< parameters.ecr_endpoint >>:grc-app-${CIRCLE_SHA1}"
              docker push "<< parameters.ecr_endpoint >>:grc-app-latest"
              docker push "<< parameters.ecr_endpoint >>:grc-dashboard-${CIRCLE_SHA1}"
              docker push "<< parameters.ecr_endpoint >>:grc-dashboard-latest"

    tag_and_push_maintenance_image:
      description: Tag and push maintenance page image
      parameters:
        env_name:
          type: string
        ecr_endpoint:
          type: string
      steps:
        - run:
            name: Tag and push maintenance page image for << parameters.env_name >>
            command: |

              docker tag grc-maintenance-custom "<< parameters.ecr_endpoint >>:grc-maintenance-custom-${CIRCLE_SHA1}"
              docker tag grc-maintenance-custom "<< parameters.ecr_endpoint >>:grc-maintenance-custom"

              docker push "<< parameters.ecr_endpoint >>:grc-maintenance-custom-${CIRCLE_SHA1}"
              docker push "<< parameters.ecr_endpoint >>:grc-maintenance-custom"


workflows:
  test-build-deploy:
    jobs:
      ### DEV ###
      - build:
          name: build-containers-dev
          env_name: DEV
          ecr_endpoint: ${ECR_ENDPOINT_DEV}
          filters:
            branches:
              only: /^RST-.*/
      - deploy_image_to_dev:
          name: build-dev
          filters:
            branches:
              only: /^RST-.*/
          requires:
            - build-containers-dev
      ### STAGING ###
      - build:
          name: build-containers-preprod
          env_name: PREPROD
          ecr_endpoint: ${ECR_ENDPOINT_PREPROD}
          filters:
            branches:
              only: /^staging$/
      - approve_staging:
          type: approval
          requires:
            - build-containers-preprod
      - deploy_image_to_preprod:
          name: deploy-staging-live
          filters:
            branches:
              only: /^staging$/
          requires:
            - approve_staging
      ### PRODUCTION ###
      - build:
          name: build-containers-prod
          env_name: PROD
          ecr_endpoint: ${ECR_ENDPOINT_PROD}
          filters:
            branches:
              only: /^master$/
      - approve_production:
          type: approval
          requires:
            - build-containers-prod
      - deploy_image_to_production:
          name: deploy-production-live
          filters:
            branches:
              only: /^master$/
          requires:
            - approve_production
      ### DEV MAINTENANCE ###
      - build_maintenance_page:
          name: build-maintenance-page-dev
          env_name: DEV
          ecr_endpoint: ${ECR_ENDPOINT_DEV}
          filters:
            branches:
              only: /^maintenance-page-dev$/
      - approve_maintenance_page_dev:
          type: approval
          requires:
            - build-maintenance-page-dev
      - deploy_maintenance_page_dev:
          name: deploy-maintenance-page-dev
          filters:
            branches:
              only: /^maintenance-page-dev$/
          requires:
            - approve_maintenance_page_dev
      
      ### PREPROD MAINTENANCE ###
      - build_maintenance_page:
          name: build-maintenance-page-preprod
          env_name: PREPROD
          ecr_endpoint: ${ECR_ENDPOINT_PREPROD}
          filters:
            branches:
              only: /^maintenance-page-preprod$/
      - approve_maintenance_page_preprod:
          type: approval
          requires:
            - build-maintenance-page-preprod
      - deploy_maintenance_page_preprod:
          name: deploy-maintenance-page-preprod
          filters:
            branches:
              only: /^maintenance-page-preprod$/
          requires:
            - approve_maintenance_page_preprod
      
      ### PROD MAINTENANCE ###
      - build_maintenance_page:
          name: build-maintenance-page-prod
          env_name: PROD
          ecr_endpoint: ${ECR_ENDPOINT_PROD}
          filters:
            branches:
              only: /^maintenance-page-prod/
      - approve_maintenance_page_prod:
          type: approval
          requires:
            - build-maintenance-page-prod
      - deploy_maintenance_page_prod:
          name: deploy-maintenance-page-prod
          filters:
            branches:
              only: /^maintenance-page-prod$/
          requires:
            - approve_maintenance_page_prod

#  smoke-tests:
#    jobs:
#      - test:
#          name: smoke-tests
#          test_command: bundle exec cucumber -p smoke
#    triggers:
#      - schedule:
#          cron: "0 6 * * *"
#          filters:
#            branches:
#              only:
#                - master
