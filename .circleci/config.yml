
version: 2.1

orbs: 
  browser-tools: circleci/browser-tools@1.2.3

references:
  app_containers: &app_containers
    docker:
      - image: circleci/postgres:10.4
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: grc-application-test
  cloud_container: &cloud_container
    docker:
      - image: ministryofjustice/cloud-platform-tools:1.24
        environment:
          GITHUB_TEAM_NAME_SLUG: sustainingdevs
          REPO_NAME: grc-application


jobs:

  build_image:
    <<: *cloud_container
    parameters:
      env_name:
        type: string
    steps:
      - checkout

      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true

      - run:
          name: build app image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              -t grc-app .

       - run:
          name: push app image
          command: |
            login="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
            ${login}

            docker tag grc-app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env_name >>.latest"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env_name >>.latest"

      - run:
          name: build docker image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
               -f admin.docker \
               -t grc-admin .
       - run:
          name: push app admin image
          command: |
            login="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
            ${login}

            docker tag grc-app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env_name >>.latest"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env_name >>.latest"

        
      - run:
          name: build dashboard image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
               -f dashboard.docker \
               -t grc-dashboard .

        - run:
          name: push dashboard image
          command: |
            login="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
            ${login}

            docker tag grc-app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env_name >>.latest"
            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:<< parameters.env_name >>.latest"
             

     
 
  deploy_image_to_live:
    <<: *cloud_container
    parameters:
      env_name:
        type: string
    steps:
      - checkout

      - run:
          name: Authenticate to LIVE cluster
          command: |
            echo -n ${KUBE_ENV_LIVE_STAGING_CACERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${KUBE_ENV_LIVE_STAGING_NAME} --certificate-authority=./ca.crt --server=https://${KUBE_ENV_LIVE_STAGING_NAME}
            kubectl config set-credentials circleci --token=${KUBE_ENV_LIVE_STAGING_TOKEN}
            kubectl config set-context ${KUBE_ENV_LIVE_STAGING_NAME} --cluster=${KUBE_ENV_LIVE_STAGING_NAME} --user=circleci --namespace=${KUBE_ENV_LIVE_STAGING_NAMESPACE}
            kubectl config use-context ${KUBE_ENV_LIVE_STAGING_NAME}

      - deploy:
          name: rolling update image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            kubectl set image -n grc-application-<< parameters.env_name >> \
                    deployment/grc-application-deployment-<< parameters.env_name >> \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl set image -n grc-application-<< parameters.env_name >> \
                    deployment/grc-application-sidekiq-<< parameters.env_name >> \
                    sidekiq="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl annotate -n grc-application-<< parameters.env_name >> \
                    deployment/grc-application-deployment-<< parameters.env_name >> \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"

  deploy_image_to_live_prod:
    <<: *cloud_container
    parameters:
      env_name:
        type: string
    steps:
      - checkout

      - run:
          name: Authenticate to LIVE cluster
          command: |
            echo -n ${KUBE_ENV_LIVE_PRODUCTION_CACERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${KUBE_ENV_LIVE_PRODUCTION_NAME} --certificate-authority=./ca.crt --server=https://${KUBE_ENV_LIVE_PRODUCTION_NAME}
            kubectl config set-credentials circleci --token=${KUBE_ENV_LIVE_PRODUCTION_TOKEN}
            kubectl config set-context ${KUBE_ENV_LIVE_PRODUCTION_NAME} --cluster=${KUBE_ENV_LIVE_PRODUCTION_NAME} --user=circleci --namespace=${KUBE_ENV_LIVE_PRODUCTION_NAMESPACE}
            kubectl config use-context ${KUBE_ENV_LIVE_PRODUCTION_NAME}

      - deploy:
          name: rolling update image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV

            kubectl set image -n grc-application-<< parameters.env_name >> \
                    deployment/grc-application-deployment-<< parameters.env_name >> \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl set image -n grc-application-<< parameters.env_name >> \
                    deployment/grc-application-sidekiq-<< parameters.env_name >> \
                    sidekiq="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            kubectl annotate -n grc-application-<< parameters.env_name >> \
                    deployment/grc-application-deployment-<< parameters.env_name >> \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"                   
  tag_production:
    <<: *cloud_container
    steps:
      - checkout

      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true

      - run:
          name: promote staging image to production
          command: |
            login="$(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)"
            ${login}

            docker pull "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"

            docker tag "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}" \
                       "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:production.latest"

            docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:production.latest"

workflows:
  test-build-deploy:
    jobs:
      - test
      ### staging ###
      - build_image:
          name: build-staging
          env_name: staging
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy_image_to_live:
          name: deploy-staging-live
          env_name: staging
          requires:
            - build-staging
      ### production ###
      - approve_production:
          type: approval
          requires:
            - deploy-staging-live
      - tag_production:
          requires:
            - approve_production
      - deploy_image_to_live_prod:
          name: deploy-production-live
          env_name: production
          requires:
            - tag_production

#  smoke-tests:
#    jobs:
#      - test:
#          name: smoke-tests
#          test_command: bundle exec cucumber -p smoke
#    triggers:
#      - schedule:
#          cron: "0 6 * * *"
#          filters:
#            branches:
#              only:
#                - master
