version: 2.1
orbs: 
  browser-tools: circleci/browser-tools@1.4.0
references:
  github_team_name_slug: &github_team_name_slug
    GITHUB_TEAM_NAME_SLUG: pet
  app_containers:
    docker:
      - image: 'circleci/postgres:10.4'
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: grc-application-test
          POSTGRES_PORT: 5432
          POSTGRES_PASSWORD: password
  cloud_container:
    docker: &ref_0
      - image: 'ministryofjustice/cloud-platform-tools:1.24'
        environment:
          GITHUB_TEAM_NAME_SLUG: pet
          REPO_NAME: grc-app
jobs:
  build:
    environment:
      FLASK_ENV: production
      FLASK_DEBUG: 1
      FLASK_APP: grc
      LOG_LEVEL: DEBUG
      TEST_URL: 'http://localhost:8080'
      SECRET_KEY: ef987sd9fwkjefosf9we0svs9q3evsd0
      SQLALCHEMY_DATABASE_URI: 'postgresql://postgres:password@localhost:5432/grc'
      SQLALCHEMY_TRACK_MODIFICATION: false
      DEFAULT_ADMIN_USER: grc-service-account@cabinetoffice.gov.uk
      NOTIFY_API: '${TEST_NOTIFY_API}'
      NOTIFY_OVERRIDE_EMAIL: test@example.com
      BUCKET_NAME: '${AUTOMATED_TEST_BUCKET_NAME}'
      AWS_ACCESS_KEY_ID: '${AUTOMATED_TEST_AWS_ACCESS_KEY_ID}'
      AWS_SECRET_ACCESS_KEY: '${AUTOMATED_TEST_AWS_SECRET_ACCESS_KEY}'
      AWS_REGION: eu-west-2
      GOVUK_PAY_API: 'https://publicapi.payments.service.gov.uk/'
      GOVUK_PAY_API_KEY: '${AUTOMATED_TEST_GOVUK_PAY_API_KEY}'
    parameters:
      env_name:
        type: string
        default: development
    docker:
      - image: 'circleci/python:3.8'
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.11
          docker_layer_caching: true
      - run:
          name: Install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - run:
          name: Set up aws
          command: |
            sudo apt-get update
            sudo apt-get --assume-yes install python3-pip
            sudo pip3 install awscli       
            
      - run:
          name: build app image
          command: |
            pip install flask_migrate
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV             
            echo "${AWS_DEFAULT_REGION}"
            echo "${AWS_ACCESS_KEY_ID_PREPROD}"
            echo "${AWS_SECRET_ACCESS_KEY_PREPROD}"
            
            docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              -t app .          
              
      - run:
          name: push app image
          command: |
            login="$(aws ecr get-login-password  --region eu-west-2 | docker login --username AWS --password-stdin 754256621582.dkr.ecr.eu-west-2.amazonaws.com)"
            ${login}
            docker tag app "${ECR_ENDPOINT_PREPROD}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT_PREPROD}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:${CIRCLE_SHA1}"
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
            docker tag app "${ECR_ENDPOINT_PREPROD}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:latest"
            docker push "${ECR_ENDPOINT_PREPROD}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:latest"
            fi
          environment:
            <<: *github_team_name_slug
            REPONAME: grc-app
        #  if [ "${CIRCLE_BRANCH}" == "main" ]; then
         #   docker tag grc-app "${ECR_ENDPOINT_PREPROD}:latest"
          #  docker push "${ECR_ENDPOINT_PREPROD}:latest"
          #fi
      - run:
          name: build admin image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV
            docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              -f admin.Dockerfile .
              -t grc-admin .
      - run:
          name: push admin image
          command: |
            login="$(aws ecr get-login-password  --region eu-west-2 | docker login --username AWS --password-stdin 754256621582.dkr.ecr.eu-west-2.amazonaws.com)"
            ${login}
            docker tag app "${ECR_ENDPOINT_PREPROD}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT_PREPROD}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:${CIRCLE_SHA1}"
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
            docker tag app "${ECR_ENDPOINT_PREPROD}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:latest"
            docker push "${ECR_ENDPOINT_PREPROD}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:latest"
            fi
          environment:
            <<: *github_team_name_slug
            REPONAME: grc-app
      - run:
          name: build dashboard image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV
            docker build \
              --label build.git.sha=${CIRCLE_SHA1} \
              --label build.git.branch=${CIRCLE_BRANCH} \
              --label build.date=${BUILD_DATE} \
              --build-arg APP_BUILD_DATE=${BUILD_DATE} \
              --build-arg APP_BUILD_TAG=${CIRCLE_BRANCH} \
              --build-arg APP_GIT_COMMIT=${CIRCLE_SHA1} \
              -f dashboard.Dockerfile .
              -t grc-dashboard . 
      - run:
          name: Login to ECR
          command: |
            $(aws ecr get-login-token --region eu-west-2)
            echo $DOCKER_AUTH_TOKEN | docker login --username AWS --password-stdin 754256621582.dkr.ecr.eu-west-2.amazonaws.com
          command: |
            docker tag app "${ECR_ENDPOINT_PREPROD}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:${CIRCLE_SHA1}"
            docker push "${ECR_ENDPOINT_PREPROD}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:${CIRCLE_SHA1}"
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
            docker tag app "${ECR_ENDPOINT_PREPROD}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:latest"
            docker push "${ECR_ENDPOINT_PREPROD}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:latest"
            fi
          environment:
            <<: *github_team_name_slug
            REPONAME: grc-app
  deploy_image_to_live:
    docker: *ref_0
    parameters:
      env_name:
        type: string
    steps:
      - checkout
      - run:
          name: Authenticate to LIVE cluster
          command: >
            echo -n ${KUBE_ENV_LIVE_STAGING_CACERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${KUBE_ENV_LIVE_STAGING_NAME}
            --certificate-authority=./ca.crt
            --server=https://${KUBE_ENV_LIVE_STAGING_NAME}
            kubectl config set-credentials circleci
            --token=${KUBE_ENV_LIVE_STAGING_TOKEN}
            kubectl config set-context ${KUBE_ENV_LIVE_STAGING_NAME}
            --cluster=${KUBE_ENV_LIVE_STAGING_NAME} --user=circleci
            --namespace=${KUBE_ENV_LIVE_STAGING_NAMESPACE}
            kubectl config use-context ${KUBE_ENV_LIVE_STAGING_NAME}
      - deploy:
          name: rolling update image
          command: |
            export BUILD_DATE=$(date -Is) >> $BASH_ENV
            source $BASH_ENV
            kubectl set image -n grc-app-<< parameters.env_name >> \
                    deployment/grc-app-deployment-<< parameters.env_name >> \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            kubectl set image -n grc-app-<< parameters.env_name >> \
                    deployment/grc-app-sidekiq-<< parameters.env_name >> \
                    sidekiq="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            kubectl annotate -n grc-app-<< parameters.env_name >> \
                    deployment/grc-app-deployment-<< parameters.env_name >> \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"
            kubectl set image -n grc-admin-<< parameters.env_name >> \
                    deployment/grc-admin-deployment-<< parameters.env_name >> \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            kubectl set image -n grc-admin-<< parameters.env_name >> \
                    deployment/grc-admin-sidekiq-<< parameters.env_name >> \
                    sidekiq="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            kubectl annotate -n grc-admin-<< parameters.env_name >> \
                    deployment/grc-admin-deployment-<< parameters.env_name >> \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"
            kubectl set image -n grc-dashboard-<< parameters.env_name >> \
                    deployment/grc-dashboard-deployment-<< parameters.env_name >> \
                    webapp="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            kubectl set image -n grc-dashboard-<< parameters.env_name >> \
                    deployment/grc-dashboard-sidekiq-<< parameters.env_name >> \
                    sidekiq="${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"
            kubectl annotate -n grc-dashboard-<< parameters.env_name >> \
                    deployment/grc-dashboard-deployment-<< parameters.env_name >> \
                    kubernetes.io/change-cause="${BUILD_DATE} set image ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} via CircleCI"
  deploy_image_to_live_prod:
    docker: *ref_0
    parameters:
      env_name:
        type: string
    steps:
      - checkout
      - run:
          name: Authenticate to LIVE cluster
          command: ''
